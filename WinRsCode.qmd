
---
title: "Sleep Analysis"
subtitle: "MATH/COSC 3570 Spring 2024"
date: today
author: "Maddie Flint, Katy Carter, Michael Hankins, Allan Akkathara"
format: 
   html:
    toc: true
execute:
  echo: false
  eval: false
  fig-height: 3
  fig-width: 5
---

```{r}
#| label: setup    #label just gives this specific r chunk a name if you ever wanna use this chunk later on
#| include: false    #include displays the code on the rendered file(html) if its true and vice versa
library(reticulate)
library(tidyverse)
library(tidymodels)
```

## How You Can Sleep Better: A Data Analysis



```{r, echo = c(2)}
#| eval: true

library(dplyr)
library(tidyr)

data <- readr::read_csv("data/Sleep_health_and_lifestyle_dataset.csv")


sleep_data <- data|>
  na.omit()
sleep_data
```


## Bind Chart

```{r}
#| eval: true
#| echo: false
library(ggplot2)

sleep_data |> ggplot(mapping = aes(x = `PhysicalActivityLevel`,
                        y = `SleepDuration` )) +  
  geom_bin2d(bins = 70) +
  scale_fill_continuous(type = "viridis") +
  geom_bin2d() +
  theme_bw()
```

## Stacked Chart

```{r}
#| eval: true
#| echo: false
sleep_data |> ggplot(mapping = aes(x=`PhysicalActivityLevel`, y=`QualityofSleep`, fill=Occupation)) + 
    geom_area()
```



## Tile Chart

```{r}
#| eval: true
#| echo: false
sleep_data_2 <- readr::read_csv("data/Sleep_health_and_lifestyle_dataset.csv")
sleep_data_2 |> ggplot(mapping = aes(x= `HeartRate`, y=`QualityofSleep`, fill= `SleepDisorder`)) + 
  geom_tile()
```



## Line Chart 

```{r}
#| eval: true
#| echo: false
sleep_data_2 |> ggplot(mapping = aes(x= Age, y=`QualityofSleep`, color = `SleepDisorder`))  + geom_line()
```




## DensityChart

```{r}
#| eval: true
#| echo: false

# Libraries
library(ggplot2)
library(hrbrthemes)
p2 <- ggplot(data = sleep_data, aes(x = DailySteps, fill = BMICategory)) +
  geom_density(alpha = 0.6) +
  theme_ipsum()
p2
```


## Violin Chart

```{r}
#| eval: true
#| echo: false
# reorder is close to order, but is made to change the order of the factor levels.

sleep_data <- sleep_data |>
  mutate(QualityofSleep = factor(QualityofSleep))

  ggplot(sleep_data, aes(x=BMICategory, y=Age, fill=QualityofSleep)) + 
    geom_violin() +
    xlab("BMI Category")
```
## Average Quality of Sleep by Gender

```{r}
#| eval: true
#| echo: false


ggplot(aes(x = Gender, y = QualityofSleep, fill = Gender),  data = sleep_data) + stat_summary(fun.y = "mean", geom = "bar")

```

## Average Time Slept by Gender

```{r}
#| eval: true
#| echo: false


ggplot(aes(x = Gender, y = SleepDuration, fill = Gender), data = sleep_data) + stat_summary(fun.y = "mean", geom = "bar")

```

## Average Quality of Sleep by Occupation


```{r}
#| eval: true
#| echo: false


#figure out a way to spread bottom labels

ggplot(aes(x = Occupation, y = QualityofSleep, fill = Occupation), data = sleep_data) + stat_summary(fun.y = "mean", geom = "bar")

```


## Averge Time Slept by Occupation


```{r}
#| eval: true
#| echo: false


ggplot(aes(x = Occupation, y = SleepDuration, fill = Occupation), data = sleep_data) + stat_summary(fun.y = "mean", geom = "bar")

```

## Average Time Slept by Sleep Disorder

```{r}
#| eval: true
#| echo: false


ggplot(aes(x = SleepDisorder, y = SleepDuration, fill = SleepDisorder), data = sleep_data) + stat_summary(fun.y = "mean", geom = "bar")

```


## Correlogram

```{r}
#| eval: true
#| echo: false

# Load necessary libraries
library(ellipse)
library(RColorBrewer)

# Subset the dataset to include only relevant columns
sleep_data_subset <- sleep_data[, c("Age","SleepDuration","PhysicalActivityLevel","QualityofSleep","StressLevel","HeartRate","DailySteps")]

str(sleep_data_subset)

# Convert non-numeric columns to numeric (if needed)
sleep_data_subset$QualityofSleep <- as.numeric(sleep_data_subset$QualityofSleep)

# Compute the correlation matrix
correlation_matrix <- cor(sleep_data_subset)

# Choose a color palette from RColorBrewer
my_colors <- brewer.pal(5, "Spectral")
my_colors <- colorRampPalette(my_colors)(100)

# Order the correlation matrix
ord <- order(correlation_matrix["QualityofSleep", ])
correlation_matrix_ord <- correlation_matrix[ord, ord]

options(repr.plot.width = 15, repr.plot.height = 6)

# Plot the correlation matrix
plotcorr(correlation_matrix_ord, col = my_colors[correlation_matrix_ord * 50 + 50], mar = c(1, 1, 1, 1))

```


## DensityChart

```{r}
#|eval: true
#|echo: false 

# Libraries
library(ggplot2)
library(hrbrthemes)
library(dplyr)
library(tidyr)
library(viridis)


# With transparency (right)
p2 <- ggplot(data = sleep_data, aes(x = DailySteps, fill = BMICategory)) +
  geom_density(adjust = 1.5, alpha = 0.4) +
  theme_ipsum()
p2
```

## Dot Plot

```{r}
#|eval: true
#|echo: false

graph1 <- sleep_data |>
  ggplot(aes(SleepDuration, Age, colour = QualityofSleep, size = PhysicalActivityLevel)) + 
  geom_point(show.legend = TRUE)
 #+ scale_color_brewer()

graph1
```

##ggplt circle

```{r}
#| eval: true
#| echo: false

sleep_data |>
  ggplot(aes(SleepDuration, Age, colour =QualityofSleep)) + 
  geom_point(size = 4) + 
  geom_point(size = 1, colour = "#ffffff") + 
  coord_polar() + 
  theme_void()
```


##Logistic Regression Models

###Data Transformation

```{r}
#| eval: true
#| echo: true

library(readr)
sleep_data <- read_csv("./data/Sleep_health_and_lifestyle_dataset.csv")

library(dplyr)
library(stringr)
library(tidymodels)

#Transform data
sleep_data <- sleep_data |>
  mutate(Gender = as.factor(Gender), #Gender as factor
         Age = as.factor(Age),
         Occupation = as.factor(Occupation), #Occupation as factor
         BMICategory = as.factor(BMICategory), #BMI as factor
         SleepDisorder = ifelse(SleepDisorder == 'None', FALSE, TRUE), #presence of sleep disorder as boolean
         SleepDisorder = as.factor(SleepDisorder) #boolean sleep disorder as factor
         ) 
sleep_data <- sleep_data |>
  mutate(BloodPressure = str_replace_all(BloodPressure, "/.*", ""), #only use systolic bp to determine high/low bp
         BloodPressure = as.numeric(BloodPressure)) #convert string to numeric


#split data into training and test sets
set.seed(123)  # for reproducibility
train_indices <- sample(nrow(sleep_data), 0.7 * nrow(sleep_data))  # 70% for training
sleep_train <- sleep_data[train_indices, ]
sleep_test <- sleep_data[-train_indices, ]

head(sleep_train)
head(sleep_test)
```



###Model Building

```{r}
#| eval: true
#| echo: true

#Define cross-val
fold <- vfold_cv(sleep_data, v = 5, strata = SleepDisorder)

#Age & Sleep Disorder
logistic_model_age <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

#Define recipe
rec_age <- recipe(SleepDisorder ~ Age, data = sleep_train) |>
  step_dummy(all_nominal(), -all_outcomes())

# Perform cross-validation
cv_results_age <- workflow() %>%
  add_recipe(rec_age) %>%
  add_model(logistic_model_age) %>%
  fit_resamples(resamples = fold)


#BMI & Sleep Disorder
logistic_model_bmi <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

rec_bmi <- recipe(SleepDisorder ~ BMICategory, data = sleep_train)

cv_results_bmi <- workflow() %>%
  add_recipe(rec_bmi) %>%
  add_model(logistic_model_bmi) %>%
  fit_resamples(resamples = fold)

#Blood Pressure & Sleep Disorder
logistic_model_bp <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

rec_bp <- recipe(SleepDisorder ~ BloodPressure, data = sleep_train)

cv_results_bp <- workflow() %>%
  add_recipe(rec_bp) %>%
  add_model(logistic_model_bp) %>%
  fit_resamples(resamples = fold)

#Quality of Sleep & Sleep Disorder
logistic_model_sq <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

rec_sq <- recipe(SleepDisorder ~ QualityofSleep, data = sleep_train)

cv_results_sq <- workflow() %>%
  add_recipe(rec_sq) %>%
  add_model(logistic_model_sq) %>%
  fit_resamples(resamples = fold)

```

##Model Predictions 

```{r}
#| eval: false
#| echo: true

#predict age
rec_age_predict <- recipe(SleepDisorder ~ Age, data = sleep_test)

age_prediction <- workflow() |>
  add_recipe(rec_age_predict) |>
  add_model(logistic_model_age)

fit_age_prediction <- fit(age_prediction, data = sleep_train)

predict_age <- predict(fit_age_prediction, new_data = sleep_test)
head(predict_age)

#predict bmi
rec_bmi_predict <- recipe(SleepDisorder ~ BMICategory, data = sleep_test)

bmi_prediction <- workflow() |>
  add_recipe(rec_bmi_predict) |>
  add_model(logistic_model_bmi)

fit_bmi_prediction <- fit(bmi_prediction, data = sleep_train)
predict_bmi <- predict(fit_bmi_prediction, new_data = sleep_test)
head(predict_bmi)

#predict blood pressure
rec_bp_predict <- recipe(SleepDisorder ~ BloodPressure, data = sleep_test)

bp_prediction <- workflow() |>
  add_recipe(rec_bp_predict) |>
  add_model(logistic_model_bp)

fit_bp_prediction <- fit(bp_prediction, data = sleep_train)
predict_bp <- predict(fit_bp_prediction, new_data = sleep_test)
head(predict_bp)

#predict sleep quality
rec_sq_predict <- recipe(SleepDisorder ~ QualityofSleep, data = sleep_test)

sq_prediction <- workflow() |>
  add_recipe(rec_sq_predict) |>
  add_model(logistic_model_sq)

fit_sq_prediction <- fit(sq_prediction, data = sleep_train)
predict_sq <- predict(fit_sq_prediction, new_data = sleep_test)
head(predict_sq)

```


## Model Accuracy
```{r}
#| eval: true
#| echo: true
#Age
collect_metrics(cv_results_age)

#BMI
collect_metrics(cv_results_bmi)

#Blood pressure
collect_metrics(cv_results_bp)

#Sleep quality
collect_metrics(cv_results_sq)
```


##Multiple Logistic Regression
```{r}
#| eval: true
#| echo: true
# Define the logistic regression model
logistic_model_multiple <- logistic_reg() |>
  set_engine("glm") |>
  set_mode("classification")

# Define the recipe with both BMI and BloodPressure
rec_multiple <- recipe(SleepDisorder ~ BMICategory + BloodPressure, data = sleep_train)

# Perform cross-validation
cv_results_multiple <- workflow() %>%
  add_recipe(rec_multiple) %>%
  add_model(logistic_model_multiple) %>%
  fit_resamples(resamples = fold)

#prediction
rec_multiple_predict <- recipe(SleepDisorder ~ BMICategory + BloodPressure, data = sleep_test)

multi_prediction <- workflow() |>
  add_recipe(rec_multiple_predict) |>
  add_model(logistic_model_multiple)

fit_multi_prediction <- fit(multi_prediction, data = sleep_train)
predict_multi <- predict(fit_multi_prediction, new_data = sleep_test)
head(predict_multi)

# View the results
collect_metrics(cv_results_multiple)


# Age & Sleep Quality
logistic_model_asq <- logistic_reg() |>
  set_engine("glm") |>
  set_mode("classification")

# Define the recipe with both BMI and BloodPressure
rec_asq <- recipe(SleepDisorder ~ Age + QualityofSleep, data = sleep_train)

# Perform cross-validation
cv_results_asq <- workflow() %>%
  add_recipe(rec_asq) %>%
  add_model(logistic_model_asq) %>%
  fit_resamples(resamples = fold)

#prediction
rec_asq_predict <- recipe(SleepDisorder ~ Age + QualityofSleep, data = sleep_test)

asq_prediction <- workflow() |>
  add_recipe(rec_asq_predict) |>
  add_model(logistic_model_asq)

fit_asq_prediction <- fit(asq_prediction, data = sleep_train)
predict_asq <- predict(fit_asq_prediction, new_data = sleep_test)
head(predict_asq)

# View the results
collect_metrics(cv_results_asq)

```



##Interactive

```{r}
#| eval: true
# Load necessary libraries
library(plotly)
library(readr)

sleep_data <- read_csv('./data/Sleep_health_and_lifestyle_dataset.csv')

interactive_plot <- sleep_data %>%
  plot_ly(x = ~SleepDuration, y = ~Age, color = ~QualityofSleep, type = "scatter", mode = "markers") %>%
  layout(title = "Sleep Quality by Age and Sleep Duration",
         xaxis = list(title = "Sleep Duration"),
         yaxis = list(title = "Age"))

# Display the plot
interactive_plot
```



## Occupation that pops up the most on our dataset.
```{r}
data <- readr::read_csv("data/Sleep_health_and_lifestyle_dataset.csv")

library(dplyr)

# Group by the variable and summarize with count
data |>
  group_by(Occupation) |>
  summarise(frequency = n()) |>
  arrange(desc(frequency))  # Sort by frequency (optional)

```


## Linear Regression on Sleep Duration and Quality of Sleep
```{r}
library(tidymodels)
library(dplyr)
library(shiny)
#install.packages("pdp")
library(pdp)

data <- readr::read_csv("data/Sleep_health_and_lifestyle_dataset.csv")

data <- data |>
  mutate(Gender = as.factor(Gender),
         BMI_Category = as.factor(BMICategory),
         PhysicalActivityLevel = as.numeric(PhysicalActivityLevel),
         StressLevel = as.numeric(StressLevel),
         DailySteps = as.numeric(DailySteps),
         SleepDuration = as.numeric(SleepDuration),
         QualityofSleep = as.numeric(QualityofSleep)) 

model_fit <- lm(SleepDuration ~ Age + PhysicalActivityLevel + StressLevel + BMI_Category + DailySteps + Gender,
              data = data)
model_fit_quality <- lm(QualityofSleep ~ Age + PhysicalActivityLevel + StressLevel + BMI_Category + DailySteps + Gender,
              data = data)
# Plot sleep duration vs fitted values from the model
ggplot(data = data,
       mapping = aes(x = SleepDuration, y = predict(model_fit))) +
  geom_point(size = 1, alpha = 0.8) +
  geom_smooth(method = "lm", se = FALSE)
# Plot sleep quality vs fitted values from the model
ggplot(data = data,
       mapping = aes(x = QualityofSleep, y = predict(model_fit_quality))) +
  geom_point(size = 1, alpha = 0.8) +
  geom_smooth(method = "lm", se = FALSE)


######################################################## UI using Shiny.

ui <- fluidPage(
  titlePanel("Sleep Duration Prediction"),
  sidebarLayout(
    sidebarPanel(
      textInput("age", "Enter your age (years)"),
      textInput("PhysicalActivityLevel", "Enter your PhysicalActivityLevel (min/day)"),
      textInput("StressLevel", "Enter your StressLevel (scale: 1-10)"),
      radioButtons("BMI_Category", "BMI Category:",
                  choices = c("Normal", "Overweight", "Obese")),
      textInput("DailySteps", "Enter your DailySteps (eg: 4200)"),
      radioButtons("Gender", "Gender:",
                  choices = c("Male", "Female")),
      submitButton("Predict Sleep Duration")
    ),
    mainPanel(
      h3("Predicted Sleep Duration"),
      verbatimTextOutput("prediction"),
      br(),
      h3("Predicted Sleep Quality"),
      verbatimTextOutput("quality_prediction")
      # plotOutput("pdp_plot")
    )
  )
)

server <- function(input, output) {
  output$prediction <- renderPrint({
    new_data <- data.frame(
      Age = as.numeric(input$age),
      PhysicalActivityLevel = as.numeric(input$PhysicalActivityLevel),
      StressLevel = as.numeric(input$StressLevel),
      BMI_Category = as.factor(input$BMI_Category),
      DailySteps = as.numeric(input$DailySteps),
      Gender = as.factor(input$Gender)
    )
    predicted_sleep <- round(predict(model_fit, newdata = new_data), digits = 2)  # Round sleep duration (2 decimals)
    predicted_quality <- round(predict(model_fit_quality, newdata = new_data), digits = 1)  # Round sleep quality (1 decimal)
    paste("Predicted sleep duration:", predicted_sleep, "hours\n",
          "Predicted sleep quality:", predicted_quality)  # Combine outputs
  })

}

shinyApp(ui = ui, server = server)
```
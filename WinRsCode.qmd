---
title: "final project name goes here"
subtitle: "MATH/COSC 3570 Spring 2024"
date: today
author: "Maddie Flint, Katy Carter, Michael Hankins, Allan Akkathara"
format: 
   html:
    toc: true
execute:
  echo: false
  eval: false
  fig-height: 3
  fig-width: 5
---

```{r}
#| label: setup    #label just gives this specific r chunk a name if you ever wanna use this chunk later on
#| include: false    #include displays the code on the rendered file(html) if its true and vice versa
library(reticulate)
library(tidyverse)
library(tidymodels)
```

## THIS IS THE TITLE

### subtitle

```{r, echo = c(2)}
#| eval: true

library(dplyr)
library(tidyr)

data <- readr::read_csv("data/Sleep_health_and_lifestyle_dataset.csv")


sleep_data <- data|>
  na.omit()
sleep_data
```

## Heat Map

```{r}
#| eval: true
# Library
library(ggplot2)
 
# Heatmap 
heatMap <- ggplot(sleep_data, aes(x = SleepDuration, y = PhysicalActivityLevel, fill= QualityofSleep)) +
  geom_tile()

print(heatMap)
```

## Violin Chart

```{r}
#| eval: false
# reorder is close to order, but is made to change the order of the factor levels.

sleep_data <- sleep_data |>
  mutate(QualityofSleep = factor(QualityofSleep))

  ggplot(sleep_data, aes(x=BMICategory, y=Age, fill=QualityofSleep)) + 
    geom_violin() +
    xlab("BMI Category")
```

##DensityChart

```{r}
#|eval: false
# Libraries
library(ggplot2)
library(hrbrthemes)
library(dplyr)
library(tidyr)
library(viridis)


# With transparency (right)
p2 <- ggplot(data = sleep_data, aes(x = DailySteps, fill = BMICategory)) +
  geom_density(adjust = 1.5, alpha = 0.4) +
  scale_fill_viridis(discrete = TRUE) +
  scale_color_viridis(discrete = TRUE) +
  theme_ipsum()
p2
```

##Dot Plot

```{r}
#|eval: false

graph1 <- sleep_data |>
  ggplot(aes(SleepDuration, Age, colour = QualityofSleep, size = PhysicalActivityLevel)) + 
  geom_point(show.legend = TRUE) + 
  theme_void() 
 #+ scale_color_brewer()

graph1
```

##ggplt circle

```{r}
#echo: true

sleep_data |>
  ggplot(aes(SleepDuration, Age, colour =QualityofSleep)) + 
  geom_point(size = 4) + 
  geom_point(size = 1, colour = "#ffffff") + 
  coord_polar() + 
  theme_void()
```

##RidgeLine
```{r}
#| eval: false
#| echo: false
# library
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)

# Plot
ggplot(sleep_data, aes(x = QualityofSleep, y = PhysicalActivityLevel, fill = ..x..)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_viridis(name = "Temp. [F]", option = "C") +
  labs(title = 'How your physical activity level change your quality of sleep') +
  theme_ipsum() +
    theme(
      legend.position="none",
      panel.spacing = unit(0.1, "lines"),
      strip.text.x = element_text(size = 8)
    )
```


##Logistic Regression Models

###Data Transformation

```{r}
sleep_data <- read_csv("./data/Sleep_health_and_lifestyle_dataset.csv")

library(dplyr)
library(stringr)
library(tidymodels)

#Transform data
sleep_data <- sleep_data |>
  mutate(Gender = as.factor(Gender), #Gender as factor
         Age = as.factor(Age),
         Occupation = as.factor(Occupation), #Occupation as factor
         BMICategory = as.factor(BMICategory), #BMI as factor
         SleepDisorder = ifelse(SleepDisorder == 'None', FALSE, TRUE), #presence of sleep disorder as boolean
         SleepDisorder = as.factor(SleepDisorder) #boolean sleep disorder as factor
         ) 
sleep_data <- sleep_data |>
  mutate(BloodPressure = str_replace_all(BloodPressure, "/.*", ""), #only use systolic bp to determine high/low bp
         BloodPressure = as.numeric(BloodPressure)) #convert string to numeric


#split data into training and test sets
set.seed(123)  # for reproducibility
train_indices <- sample(nrow(sleep_data), 0.7 * nrow(sleep_data))  # 70% for training
sleep_train <- sleep_data[train_indices, ]
sleep_test <- sleep_data[-train_indices, ]

head(sleep_train)
head(sleep_test)
```



##Build Models

```{r}
#| eval: false

#Define cross-val
fold <- vfold_cv(sleep_data, v = 5, strata = SleepDisorder)

#Age & Sleep Disorder
logistic_model_age <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

#Define recipe
rec_age <- recipe(SleepDisorder ~ Age, data = sleep_train) |>
  step_dummy(all_nominal(), -all_outcomes())

# Perform cross-validation
cv_results_age <- workflow() %>%
  add_recipe(rec_age) %>%
  add_model(logistic_model_age) %>%
  fit_resamples(resamples = fold)


#BMI & Sleep Disorder
logistic_model_bmi <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

rec_bmi <- recipe(SleepDisorder ~ BMICategory, data = sleep_train)

cv_results_bmi <- workflow() %>%
  add_recipe(rec_bmi) %>%
  add_model(logistic_model_bmi) %>%
  fit_resamples(resamples = fold)

#Blood Pressure & Sleep Disorder
logistic_model_bp <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

rec_bp <- recipe(SleepDisorder ~ BloodPressure, data = sleep_train)

cv_results_bp <- workflow() %>%
  add_recipe(rec_bp) %>%
  add_model(logistic_model_bp) %>%
  fit_resamples(resamples = fold)

#Quality of Sleep & Sleep Disorder
logistic_model_sq <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

rec_sq <- recipe(SleepDisorder ~ QualityofSleep, data = sleep_train)

cv_results_sq <- workflow() %>%
  add_recipe(rec_sq) %>%
  add_model(logistic_model_sq) %>%
  fit_resamples(resamples = fold)

```

##Model Predictions 

```{r}
#| eval: false

#predict age
rec_age_predict <- recipe(SleepDisorder ~ Age, data = sleep_test)

age_prediction <- workflow() |>
  add_recipe(rec_age_predict) |>
  add_model(logistic_model_age)

fit_age_prediction <- fit(age_prediction, data = sleep_train)

predict_age <- predict(fit_age_prediction, new_data = sleep_test)
head(predict_age)

#predict bmi
rec_bmi_predict <- recipe(SleepDisorder ~ BMICategory, data = sleep_test)

bmi_prediction <- workflow() |>
  add_recipe(rec_bmi_predict) |>
  add_model(logistic_model_bmi)

fit_bmi_prediction <- fit(bmi_prediction, data = sleep_train)
predict_bmi <- predict(fit_bmi_prediction, new_data = sleep_test)
head(predict_bmi)

#predict blood pressure
rec_bp_predict <- recipe(SleepDisorder ~ BloodPressure, data = sleep_test)

bp_prediction <- workflow() |>
  add_recipe(rec_bp_predict) |>
  add_model(logistic_model_bp)

fit_bp_prediction <- fit(bp_prediction, data = sleep_train)
predict_bp <- predict(fit_bp_prediction, new_data = sleep_test)
head(predict_bp)

#predict sleep quality
rec_sq_predict <- recipe(SleepDisorder ~ QualityofSleep, data = sleep_test)

sq_prediction <- workflow() |>
  add_recipe(rec_sq_predict) |>
  add_model(logistic_model_sq)

fit_sq_prediction <- fit(sq_prediction, data = sleep_train)
predict_sq <- predict(fit_sq_prediction, new_data = sleep_test)
head(predict_sq)

```
## Model Accuracy
```{r}

#Age
collect_metrics(cv_results_age)

#BMI
collect_metrics(cv_results_bmi)

#Blood pressure
collect_metrics(cv_results_bp)

#Sleep quality
collect_metrics(cv_results_sq)
```

##Multiple Logistic Regression
```{r}
# Define the logistic regression model
logistic_model_multiple <- logistic_reg() |>
  set_engine("glm") |>
  set_mode("classification")

# Define the recipe with both BMI and BloodPressure
rec_multiple <- recipe(SleepDisorder ~ BMICategory + BloodPressure, data = sleep_train)

# Perform cross-validation
cv_results_multiple <- workflow() %>%
  add_recipe(rec_multiple) %>%
  add_model(logistic_model_multiple) %>%
  fit_resamples(resamples = fold)

#prediction
rec_multiple_predict <- recipe(SleepDisorder ~ BMICategory + BloodPressure, data = sleep_test)

multi_prediction <- workflow() |>
  add_recipe(rec_multiple_predict) |>
  add_model(logistic_model_multiple)

fit_multi_prediction <- fit(multi_prediction, data = sleep_train)
predict_multi <- predict(fit_multi_prediction, new_data = sleep_test)
head(predict_multi)

# View the results
collect_metrics(cv_results_multiple)


# Age & Sleep Quality
logistic_model_asq <- logistic_reg() |>
  set_engine("glm") |>
  set_mode("classification")

# Define the recipe with both BMI and BloodPressure
rec_asq <- recipe(SleepDisorder ~ Age + QualityofSleep, data = sleep_train)

# Perform cross-validation
cv_results_asq <- workflow() %>%
  add_recipe(rec_asq) %>%
  add_model(logistic_model_asq) %>%
  fit_resamples(resamples = fold)

#prediction
rec_asq_predict <- recipe(SleepDisorder ~ Age + QualityofSleep, data = sleep_test)

asq_prediction <- workflow() |>
  add_recipe(rec_asq_predict) |>
  add_model(logistic_model_asq)

fit_asq_prediction <- fit(asq_prediction, data = sleep_train)
predict_asq <- predict(fit_asq_prediction, new_data = sleep_test)
head(predict_asq)

# View the results
collect_metrics(cv_results_asq)

```


##Model Training
```{r}
#|eval: true

# Convert SleepDisorder to factor
sleep_data$SleepDisorder <- factor(sleep_data$SleepDisorder)
levels(sleep_data$SleepDisorder)

# Train the logistic regression model
log_reg_spec <- logistic_reg() |>
  set_engine("glm") |>
  set_mode("classification")

log_reg_fit <- log_reg_spec |>
  fit(SleepDisorder ~ ., data = train_data)
```

##Model Evaluation
```{r}
# Optionally, you can evaluate the performance of the trained model using appropriate metrics
log_reg_fit %>%
  predict(test_data) |>
  bind_cols(test_data) |>
  metrics(truth = SleepDisorder, estimate = .pred_class)

```


##Interactive

```{r}
# Load necessary libraries
library(plotly)


interactive_plot <- sleep_data %>%
  plot_ly(x = ~SleepDuration, y = ~Age, color = ~QualityofSleep, type = "scatter", mode = "markers") %>%
  layout(title = "Sleep Quality by Age and Sleep Duration",
         xaxis = list(title = "Sleep Duration"),
         yaxis = list(title = "Age"))

# Display the plot
interactive_plot
```

##User input

```{r}
#| eval: false
#shiny library
library(shiny)

# Define UI
ui <- fluidPage(
  titlePanel("Sleep Quality Predictor"),
  sidebarLayout(
    sidebarPanel(
      # Input fields for sleep data
      numericInput("sleep_duration", "Sleep Duration (hours):", value = 7),
      numericInput("age", "Age:", value = 30),
      # Add more input fields as needed
    ),
    mainPanel(
      # Output plot or result
      plotOutput("prediction_plot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  output$prediction_result <- renderText({
    # Use input values to make predictions
    new_data <- tibble(
      SleepDuration = input$sleep_duration,
      Age = input$age
      # Add more variables as needed
    )
    prediction <- predict(log_reg_fit, new_data)
    ifelse(prediction == 1, "Likely to have sleep disorder", "Unlikely to have sleep disorder")
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)

```
